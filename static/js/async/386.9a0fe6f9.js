"use strict";(self.webpackChunk_hikestack_official=self.webpackChunk_hikestack_official||[]).push([["386"],{938:function(e,n,r){r.r(n),r.d(n,{default:function(){return a}});var o=r(1549),s=r(6603);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre"},(0,s.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"动态模块",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动态模块",children:"#"}),"动态模块"]}),"\n",(0,o.jsx)(n.p,{children:"使用模块是构建高效、可维护和可扩展的应用程序的关键所在。模块使得开发者能够清晰地分离关注点，将应用程序的不同部分封装到独立的模块中。"}),"\n",(0,o.jsxs)(n.p,{children:["以日志模块为例，展示如何创建一个标准的 ",(0,o.jsx)(n.code,{children:"NestJS"})," 动态模块，以下是详细的步骤指南："]}),"\n",(0,o.jsxs)(n.h2,{id:"目录结构",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#目录结构",children:"#"}),"目录结构"]}),"\n",(0,o.jsxs)(n.p,{children:["首先，你需要为日志模块创建一个基本的文件结构。这通常包括一个模块文件（如 ",(0,o.jsx)(n.code,{children:"logger.module.ts"}),"）、一个服务文件（如 ",(0,o.jsx)(n.code,{children:"logger.service.ts"}),"），以及可能需要的接口（",(0,o.jsx)(n.code,{children:"interfaces"}),"）和适配器（",(0,o.jsx)(n.code,{children:"adapters"}),"）。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tree",meta:"",children:"├── src\n│	├── configs\n│	│   ├── logger-config.ts\n│	│   └── index.ts\n│	├── logger\n│	│	├── adapters\n│	│   │	├── winston-adapter.ts\n│	│   │	└── index.ts\n│	│	├── interfaces\n│	│   │	├── logger.interface.ts\n│	│   │	├── logger-module-options.ts\n│	│   │	└── index.ts\n│   │   ├── logger.module-definition.ts\n│   │   ├── logger.service.ts\n│   │   ├── logger.module.ts\n│   │   └── index.ts\n│	├── app.controller.ts\n│	├── app.service.ts\n│   ├── app.module.ts\n│	└── main.ts\n└── tsconfig.json\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"定义接口",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#定义接口",children:"#"}),"定义接口"]}),"\n",(0,o.jsxs)(n.p,{children:["定义服务需要实现的 ",(0,o.jsx)(n.code,{children:"ILogger"})," 接口，这里直接继承自 ",(0,o.jsx)(n.code,{children:"Nest"})," 内部提供的 ",(0,o.jsx)(n.code,{children:"LoggerService"})," 接口。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",meta:'title="interfaces/logger.interface.ts"',children:'import { LoggerService } from "@nestjs/common";\n\nexport interface ILogger extends LoggerService {}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["在 ",(0,o.jsx)(n.code,{children:"logger.service.ts"})," 文件中，通过模块配置将具体的实现类传递给服务。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",meta:'title="logger.service.ts"',children:'import { Inject, Injectable } from "@nestjs/common";\nimport { ILogger, LoggerModuleOptions } from "./interfaces";\nimport { MODULE_OPTIONS_TOKEN } from "./logger.module-definition";\n\n@Injectable()\nexport class LoggerService implements ILogger {\n	protected readonly logger: ILogger;\n	constructor(\n		@Inject(MODULE_OPTIONS_TOKEN)\n		private readonly options: LoggerModuleOptions,\n	) {\n		if (!this.options.logger) {\n			throw new Error("LoggerModuleOptions.logger is not defined");\n		}\n		this.logger = this.options.logger;\n	}\n\n	log(message: any, ...optionalParams: any[]) {\n		this.logger.log(message, ...optionalParams);\n	}\n\n	error(message: any, ...optionalParams: any[]) {\n		this.logger.error(message, ...optionalParams);\n	}\n\n	warn(message: any, ...optionalParams: any[]) {\n		this.logger.warn(message, ...optionalParams);\n	}\n}\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"实现服务",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现服务",children:"#"}),"实现服务"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"WinstonAdapter"})," 使用 ",(0,o.jsx)(n.a,{href:"https://github.com/winstonjs/winston",target:"_blank",rel:"noopener noreferrer",children:"winston"})," 实现实际的日志记录功能，比如将日志信息输出到控制台、文件或其他日志存储系统。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",meta:'title="adapters/winston.adapter.ts"',children:'import { inspect } from "util";\nimport * as winston from "winston";\nimport { ILogger } from "../../interfaces";\n\nexport class WinstonAdapter implements ILogger {\n	protected readonly logger: winston.Logger;\n\n	constructor(private readonly options: winston.LoggerOptions) {\n		this.logger = winston.createLogger(this.options);\n	}\n\n	log(message: any, ...optionalParams: any[]) {\n		this.logger.info(this.format(message, ...optionalParams));\n	}\n\n	error(message: any, ...optionalParams: any[]) {\n		this.logger.error(this.format(message, ...optionalParams));\n	}\n\n	warn(message: any, ...optionalParams: any[]) {\n		this.logger.warn(this.format(message, ...optionalParams));\n	}\n\n	private format(...messages: unknown[]) {\n		return messages\n			.map((m) => (typeof m === "string" ? m : inspect(m)))\n			.join(" ");\n	}\n}\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"构建模块",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建模块",children:"#"}),"构建模块"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"NestJS"})," 提供了一个 ",(0,o.jsx)(n.code,{children:"ConfigurableModuleBuilder"})," 类用于便捷的构建动态模块的配置。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",meta:'title="interfaces/logger.module-definition.ts"',children:'import { ConfigurableModuleBuilder } from "@nestjs/common";\nimport { LoggerModuleOptions } from "./interfaces";\n\nexport const {\n	ConfigurableModuleClass,\n	MODULE_OPTIONS_TOKEN,\n	OPTIONS_TYPE,\n	ASYNC_OPTIONS_TYPE,\n} = new ConfigurableModuleBuilder<LoggerModuleOptions>()\n	.setExtras(\n		{\n			isGlobal: true,\n		},\n		(definition, extras) => ({\n			...definition,\n			global: extras.isGlobal,\n		}),\n	)\n	.build();\n'})}),"\n",(0,o.jsxs)(n.p,{children:["使用 ",(0,o.jsx)(n.code,{children:"@Module"})," 装饰器来定义日志模块。这个模块将包含日志服务作为提供者，并可以配置为动态模块，以便在应用程序的不同部分中按需加载。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",meta:'title="logger.module.ts"',children:'import { DynamicModule, Module } from "@nestjs/common";\nimport {\n	ASYNC_OPTIONS_TYPE,\n	ConfigurableModuleClass,\n	OPTIONS_TYPE,\n} from "./logger.module-definition";\nimport { LoggerService } from "./logger.service";\n\n@Module({\n	providers: [LoggerService],\n	exports: [LoggerService],\n})\nexport class LoggerModule extends ConfigurableModuleClass {\n	static register(options: typeof OPTIONS_TYPE): DynamicModule {\n		return {\n			...super.register(options),\n		};\n	}\n\n	static registerAsync(options: typeof ASYNC_OPTIONS_TYPE): DynamicModule {\n		return {\n			...super.registerAsync(options),\n		};\n	}\n}\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"注册模块",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注册模块",children:"#"}),"注册模块"]}),"\n",(0,o.jsxs)(n.p,{children:["由于它是一个动态模块，你可以使用 ",(0,o.jsx)(n.code,{children:"LoggerModule.register()"})," 或 ",(0,o.jsx)(n.code,{children:"LoggerModule.registerAsync()"})," 方法在根模块或其他模块中导入它。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",meta:'title="app.module.ts"',children:'import path from "path";\nimport { Module } from "@nestjs/common";\nimport { ConfigModule, ConfigService } from "@nestjs/config";\nimport { LoggerModule } from "@/logger";\nimport { configs } from "./configs";\n\n@Module({\n	imports: [\n		ConfigModule.forRoot({\n			isGlobal: true,\n			cache: true,\n			envFilePath: [\n				path.resolve(\n					__dirname,\n					"..",\n					`env/${process.env.NODE_ENV || "development"}.env`,\n				),\n			],\n			load: configs,\n		}),\n		LoggerModule.registerAsync({\n			inject: [ConfigService],\n			useFactory: (configService: ConfigService) => ({\n				logger: new WinstonAdapter(configService.get("logger")),\n			}),\n		}),\n		...\n	],\n	providers: [\n		...\n	],\n})\nexport class AppModule {}\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"使用服务",children:[(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用服务",children:"#"}),"使用服务"]}),"\n",(0,o.jsxs)(n.p,{children:["最后，你可以在需要记录日志的地方注入 LoggerService 并使用它的方法。这可以通过构造函数注入或其他依赖注入机制来实现。\n在这个日志模块中，我们通过适配器模式实现了对",(0,o.jsx)(n.code,{children:"Winston"}),"日志库的封装，使得日志服务能够灵活地切换到不同的日志框架，而无需修改服务调用方的代码。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",meta:'title="app.service.ts"',children:'import { Injectable } from "@nestjs/common";\nimport { LoggerService } from "@/logger";\n\n@Injectable()\nexport class AppService {\n	constructor(\n		private readonly loggerService: LoggerService,\n	) {\n		loggerService.log("Hello!");\n	}\n}\n'})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(i,e)})):i(e)}let a=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["guide%2Fdocs%2Fmodule.mdx"]={toc:[{id:"目录结构",text:"目录结构",depth:2},{id:"定义接口",text:"定义接口",depth:2},{id:"实现服务",text:"实现服务",depth:2},{id:"构建模块",text:"构建模块",depth:2},{id:"注册模块",text:"注册模块",depth:2},{id:"使用服务",text:"使用服务",depth:2}],title:"动态模块",frontmatter:{}}}}]);