"use strict";(self.webpackChunk_hikestack_official=self.webpackChunk_hikestack_official||[]).push([["653"],{4631:function(e,n,s){s.r(n),s.d(n,{default:function(){return o}});var r=s(1549),t=s(6603);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",div:"div"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"元编程",children:["元编程",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#元编程",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"元编程本质上是一种编程范式，它允许程序在运行时或编译时生成、修改或操作其他程序（包括它自身）的代码、结构或行为。"}),"\n",(0,r.jsxs)(n.p,{children:["元编程为开发者提供了强大的工具和灵活性，以动态地操作和扩展应用程序。装饰器和反射API、TypeScript编译器API，都是在 ",(0,r.jsx)(n.code,{children:"NestJS"})," 中常用的实现元编程的策略。"]}),"\n",(0,r.jsx)(n.p,{children:"下面，我将对这几种方式进行详细介绍："}),"\n",(0,r.jsxs)(n.h2,{id:"装饰器和反射api",children:["装饰器和反射API",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#装饰器和反射api",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"创建元数据装饰器"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { SetMetadata } from "@nestjs/common";\n\nexport const PUBLIC = "auth:public";\nexport const Public = () => SetMetadata(PUBLIC, true);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["使用 ",(0,r.jsx)(n.code,{children:" ModulesContainer "})," 获取所有模块从中获取我们感兴趣的控制器类，然后通过 ",(0,r.jsx)(n.code,{children:"MetadataScanner"})," 扫描该控制器的所有方法。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Inject, Injectable, OnModuleInit } from "@nestjs/common";\nimport { MetadataScanner, ModulesContainer } from "@nestjs/core";\nimport { PUBLIC } from "./decorators";\n\n@Injectable()\nexport class AppService implements OnModuleInit {\n	constructor(\n		private readonly modulesContainer: ModulesContainer,\n		private readonly metadataScanner: MetadataScanner,\n	) {}\n\n	async onModuleInit() {\n		[...this.modulesContainer.values()].forEach((module) => {\n			module.controllers.forEach((controller) => {\n				const isPublic =\n					Reflect.getMetadata(PUBLIC, controller.metatype) ?? false;\n				console.log(`${controller.name} isPublic: ${isPublic}`);\n\n				const methods = this.metadataScanner.getAllMethodNames(\n					controller.instance,\n				);\n				methods.forEach((method) => {\n					const isPublic =\n						Reflect.getMetadata(PUBLIC, controller.instance[method]) ?? false;\n					console.log(`${controller.name}.${method} isPublic: ${isPublic}`);\n				});\n			});\n		});\n	}\n}\n'})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"提示"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["需要先导入 ",(0,r.jsx)(n.code,{children:"DiscoveryModule"})," 才能使用使用 ",(0,r.jsx)(n.code,{children:" ModulesContainer "})," 和 ",(0,r.jsx)(n.code,{children:"MetadataScanner"}),"。\n"]})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { DynamicModule, Module } from "@nestjs/common";\nimport { DiscoveryModule } from "@nestjs/core";\nimport { AppService } from "./app.service";\n\n@Module({\n	imports: [DiscoveryModule],\n	providers: [AppService],\n	exports: [AppService],\n})\nexport class AuthModule extends ConfigurableModuleClass {}\n\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"typescript编译器api",children:["TypeScript编译器API",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#typescript编译器api",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["为了简单起见我们使用 ",(0,r.jsx)(n.a,{href:"https://github.com/dsherret/ts-morph",target:"_blank",rel:"noopener noreferrer",children:"ts-morph"})," 操作 ",(0,r.jsx)(n.code,{children:"TypeScript"})," 编译器API"]}),"\n",(0,r.jsx)(n.p,{children:"加载所有源文件"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const rootPath = path.resolve(__dirname);\nconst project = new tsMorph.Project({\n	tsConfigFilePath: path.resolve(rootPath, "./tsconfig.json"),\n});\n\nconst sourceFiles = project.getSourceFiles();\n'})}),"\n",(0,r.jsx)(n.p,{children:"可针对感兴趣的文件进行操作"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"sourceFiles.forEach((sf) => {\n	sf.getEnums().forEach((enumDeclaration) => {\n		const enumName = enumDeclaration.getName();\n		const members = enumDeclaration.getMembers().map((member) => {\n			return member.getValue();\n		});\n	});\n\n	sf.getClasses().forEach((classDeclaration) => {\n		const className = classDeclaration.getName();\n\n		classDeclaration.getMethods().forEach((method) => {\n			const methodName = method.getName();\n\n			method.getDecorators().forEach((decorator) => {\n				const name = decorator.getName();\n				const args = decorator.getArguments();\n			});\n\n			method.getParameters().map((parameter) => {\n				const name = parameter.getName();\n				const type = parameter.getType();\n\n				parameter.getDecorators().forEach((decorator) => {\n				});	\n			});\n\n			const returnType = method.getReturnType();\n		});\n	});\n});\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"提示"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsx)(n.p,{children:"获取类的所有属性（包括继承的属性）"})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"private getAllProperties(\n	sourceFiles: tsMorph.SourceFile[],\n	classDeclaration: tsMorph.ClassDeclaration,\n): tsMorph.ClassInstancePropertyTypes[] {\n	let properties: tsMorph.ClassInstancePropertyTypes[] = [\n		...classDeclaration.getInstanceProperties(),\n	];\n\n	const baseTypeNode = classDeclaration.getBaseClass();\n\n	if (baseTypeNode) {\n		const baseClassName = baseTypeNode.getName();\n\n		const baseClassDeclaration = sourceFiles.reduce(\n			(acc, sourceFile) => {\n				const classDecl = sourceFile.getClass(baseClassName);\n				return classDecl ? classDecl : acc;\n			},\n			undefined as tsMorph.ClassDeclaration | undefined,\n		);\n\n		if (baseClassDeclaration) {\n			properties = [\n				...properties,\n				...this.getAllProperties(sourceFiles, baseClassDeclaration),\n			];\n		}\n	}\n\n	return properties;\n}\n"})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}let o=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["guide%2Fbackend%2Fblogs%2Fmetadata.mdx"]={toc:[{text:"装饰器和反射API",id:"装饰器和反射api",depth:2},{text:"TypeScript编译器API",id:"typescript编译器api",depth:2}],title:"元编程",frontmatter:{}}}}]);