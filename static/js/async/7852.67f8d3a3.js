"use strict";(self.webpackChunk_hikestack_official=self.webpackChunk_hikestack_official||[]).push([["7852"],{2333:function(e,n,r){r.r(n),r.d(n,{default:function(){return c}});var s=r(1549),i=r(6603);function t(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",strong:"strong",pre:"pre",code:"code"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"分布式锁",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分布式锁",children:"#"}),"分布式锁"]}),"\n",(0,s.jsxs)(n.h2,{id:"为什么要使用分布式锁",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么要使用分布式锁",children:"#"}),"为什么要使用分布式锁"]}),"\n",(0,s.jsx)(n.p,{children:"在分布式系统中，多个服务实例或节点可能会同时访问和修改共享资源。如果没有适当的同步机制，就可能导致数据不一致、脏读、脏写等并发问题。分布式锁就是为了解决这些问题而引入的一种同步机制。"}),"\n",(0,s.jsxs)(n.h2,{id:"分布式锁的作用",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分布式锁的作用",children:"#"}),"分布式锁的作用"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"保证数据一致性"}),"：在分布式系统中，多个服务实例可能会同时读取和修改同一个数据项。通过使用分布式锁，可以确保在任意时刻只有一个服务实例能够访问该数据项，从而避免了数据不一致的问题。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"避免并发冲突"}),"：在并发环境下，多个线程或进程可能会同时尝试执行某项操作。如果没有适当的同步机制，就可能导致并发冲突，例如两个线程同时尝试修改同一个数据项。分布式锁能够确保在任意时刻只有一个线程或进程能够执行某项操作，从而避免了并发冲突。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"提高系统可伸缩性"}),"：随着业务的发展，系统可能需要扩展更多的服务实例来处理更多的请求。通过使用分布式锁，可以将共享资源的访问权限分散到多个服务实例上，从而提高了系统的可伸缩性。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"分布式锁的实现方式",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分布式锁的实现方式",children:"#"}),"分布式锁的实现方式"]}),"\n",(0,s.jsx)(n.p,{children:"分布式锁的实现方式有很多种，例如基于数据库、基于缓存（如Redis）、基于ZooKeeper等。其中，基于Redis的分布式锁因为Redis的高性能和易扩展性而广受欢迎。"}),"\n",(0,s.jsxs)(n.h2,{id:"redlock算法",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redlock算法",children:"#"}),"Redlock算法"]}),"\n",(0,s.jsx)(n.p,{children:"Redlock算法是一种分布式锁算法，由Redis之父Salvatore Sanfilippo设计，旨在解决在分布式系统中实现可靠的锁机制时可能遇到的单点故障问题。该算法通过在多个独立的Redis节点上尝试获取锁来提高系统的可用性和容错性。Redlock算法的基本思想如下："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"获取多个锁"}),"：客户端会尝试在多个Redis节点上获取锁。只有当客户端在大多数（N/2+1，其中N是Redis节点的总数）节点上成功获取锁时，才认为获取了分布式锁。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"设置锁的自动过期时间"}),"：为了防止某个客户端在持有锁的过程中崩溃而导致死锁，Redlock算法会要求客户端在获取锁时设置一个自动过期时间。当这个时间到达后，锁会自动释放。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"顺序请求锁"}),"：为了降低网络延迟和时钟误差对锁获取的影响，Redlock算法要求客户端按照相同的顺序请求所有Redis节点的锁。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"释放锁"}),"：当客户端完成操作或发生异常时，需要释放之前获取的锁。由于Redlock算法允许多个Redis节点同时持有锁，因此客户端需要遍历所有Redis节点并释放它们持有的锁。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"redlock算法的优势",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redlock算法的优势",children:"#"}),"Redlock算法的优势"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"提高可用性"}),"：通过在多个Redis节点上尝试获取锁，Redlock算法能够在某些节点出现故障时仍然提供锁服务，从而提高了系统的可用性。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"容错性"}),"：Redlock算法允许在少数Redis节点出现故障时仍然能够正确地获取和释放锁，从而提高了系统的容错性。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"可扩展性"}),"：Redlock算法可以很容易地扩展到更多的Redis节点上，以支持更大的并发量和更高的系统吞吐量。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"实现算法",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现算法",children:"#"}),"实现算法"]}),"\n",(0,s.jsx)(n.p,{children:"在 Redlock 算法的实际实现中，我们通常会使用 Lua 脚本来确保在 Redis 中设置锁和释放锁操作的原子性。由于 Lua 脚本可以在 Redis 服务器上作为一个单独的事务执行，这确保了即使在网络分区或其他并发条件下，锁的行为也是一致的。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:'import * as Redis from \'ioredis\';  \n  \ninterface RedlockOptions {  \n  driftFactor?: number;  \n  retryCount?: number;  \n  retryDelay?: number;  \n  retryJitter?: number;  \n}  \n  \nclass Redlock {  \n  private clients: Redis.Redis[];  \n  private options: RedlockOptions;\n  private acquireScript: string;  \n  private extendScript: string;  \n  private releaseScript: string;  \n  \n  constructor(clients: Redis.Redis[], options: RedlockOptions = {}) {  \n    this.clients = clients;  \n    this.options = {  \n        // driftFactor：时钟漂移因子  \n        // 分布式系统中各个节点的时钟可能存在微小的差异（时钟漂移），在判断锁是否过期时，会加上锁的 TTL（Time To Live）的百分比作为缓冲时间。默认值为 0.01，表示额外加上原有效期的 1%。\n        driftFactor: options.driftFactor ?? 0.01,   \n\n        // retryCount：重试次数 \n        // 如果在尝试获取锁时失败（例如锁已被其他客户端持有），客户端会尝试重新获取锁。这个参数指定了重试的次数。默认值为 3，表示总共会尝试 3 次。  \n        retryCount: options.retryCount ?? 3,\n\n        // retryDelay：重试延迟  \n        // 在每次尝试获取锁失败后，客户端会等待一段时间再尝试。这个参数指定了等待的时间（通常以毫秒为单位）。默认值为 200 毫秒。\n        retryDelay: options.retryDelay ?? 200,   \n\n        // retryJitter：重试抖动  \n        // 为了避免所有的客户端都在同一时间重新尝试获取锁（可能产生“惊群效应”），可以在每次重试时引入一些随机性（抖动）。这个参数指定了随机性的范围（通常以毫秒为单位）。默认值为 200 毫秒，表示在每次重试时，实际的等待时间会在 retryDelay 的基础上加上或减去一个随机数（范围在 0 到 200 毫秒之间）。\n        retryJitter: options.retryJitter ?? 200, \n    };  \n  \n    this.acquireScript = `  \n      for i, key in ipairs(KEYS) do  \n        if redis.call("exists", key) == 1 then  \n          return 0  \n        end  \n      end  \n  \n      for i, key in ipairs(KEYS) do  \n        redis.call("set", key, ARGV[1], "PX", ARGV[2], "NX")  \n      end  \n  \n      return #KEYS  \n    `;  \n  \n    this.extendScript = `  \n      for i, key in ipairs(KEYS) do  \n        if redis.call("get", key) ~= ARGV[1] or redis.call("ttl", key) < 0 then  \n          return 0  \n        end  \n      end  \n  \n      for i, key in ipairs(KEYS) do  \n        redis.call("expire", key, ARGV[2])  \n      end  \n  \n      return #KEYS  \n    `;  \n  \n    this.releaseScript = `  \n      local count = 0  \n      for i, key in ipairs(KEYS) do  \n        if redis.call("get", key) == ARGV[1] then  \n          redis.call("del", key)  \n          count = count + 1  \n        end  \n      end  \n  \n      return count  \n    `;  \n  }  \n  \n  private async acquireLock(client: Redis.Redis, resource: string, ttl: number, value: string): Promise<number> {  \n    return client.eval(this.acquireScript, 1, resource, value, ttl.toString());  \n  }  \n\n  private async releaseLock(client: Redis.Redis, resource: string, value: string): Promise<number> {  \n    return client.eval(this.releaseScript, 1, resource, value);  \n  }\n  \n  async extend(client: Redis.Redis, resource: string, ttl: number, value: string): Promise<number> {  \n    return client.eval(this.extendScript, 1, resource, value, ttl.toString());  \n  }\n  \n  async lock(resource: string, ttl: number): Promise<string | null> {\n    const drift = Math.ceil(ttl * this.options.driftFactor);\n    let validLocksCount = 0;\n    const locks: { client: Redis.Redis; value: string }[] = [];\n    const startTime = Date.now();\n\n    for (let attempt = 0; attempt < this.options.retryCount; attempt++) {\n      const validThisTime = new Set<Redis.Redis>();\n\n      for (const client of this.clients) {\n        const lockValue = `${startTime}:${Math.random().toString(36).slice(2)}`; // 创建一个唯一的锁值\n        const ttlMillis = Math.max(\n          ttl - Math.floor((Date.now() - startTime) / 1000),\n          drift,\n        );\n\n        try {\n          const result = await this.acquireLock(\n            client,\n            resource,\n            ttlMillis,\n            lockValue,\n          );\n\n          if (result === 1) {\n            // 成功获取锁\n            validThisTime.add(client);\n            locks.push({ client, value: lockValue });\n          }\n\n          // 如果在所有实例上都获取了锁，则退出循环\n          if (validThisTime.size === this.clients.length) {\n            validLocksCount = this.clients.length;\n            break;\n          }\n        } catch (err) {\n          // 忽略错误，继续尝试下一个实例\n        }\n      }\n\n      // 检查是否在所有实例上都成功获取了锁\n      if (validLocksCount === this.clients.length) {\n        // 成功获取锁\n        return lockValue;\n      }\n\n      // 等待重试延迟\n      await new Promise((resolve) =>\n        setTimeout(resolve, this.options.retryDelay),\n      );\n\n      // 清理本次尝试中获取的锁\n      for (const { client } of locks) {\n        if (!validThisTime.has(client)) {\n          await this.releaseLock(\n            client,\n            resource,\n            locks.find((l) => l.client === client)?.value || \'\',\n          );          \n        }\n      }           \n\n      // 重置锁列表，为下一次尝试做准备\n      locks.length = 0;\n\n      // 检查是否超出了总的 TTL 时间\n      if (Date.now() - startTime >= ttl) {\n        return null; // 超出 TTL 时间，返回 null\n      }\n    }    \n\n    // 如果在重试次数内都没有在所有实例上获取到锁，则返回 null\n    return null;\n  }\n  \n  async unlock(resource: string, lockValue: string): Promise<number> {  \n    let totalReleased = 0;  \n  \n    // 遍历所有客户端并尝试释放锁  \n    for (const client of this.clients) {  \n      try {  \n        // 尝试释放锁并获取释放的锁的数量  \n        const released = await this.releaseLock(client, resource, lockValue);  \n        totalReleased += released; // 累加释放的锁的数量  \n  \n        // 由于我们只有一个锁键对应于 resource，所以一旦一个客户端成功释放了锁，我们就没有必要继续在其他客户端上尝试  \n        if (released > 0) {  \n          break; // 停止遍历，因为已经有一个客户端成功释放了锁  \n        }  \n      } catch (error) {  \n        // 在这里处理错误，比如记录日志或抛出异常  \n        console.error(`Failed to release lock for resource ${resource} on client`, error);  \n      }  \n    }  \n  \n    // 返回成功释放的锁的数量  \n    return totalReleased;  \n  }\n  \n  async tryLock(redlock: Redlock, resources: string[], ttl: number): Promise<string[] | null> {  \n    const lockPromises = resources.map(async (resource) => {  \n      try {  \n        const lockValue = await this.lock(resource, ttl);  \n        if (lockValue) {  \n          return { resource, lockValue };  \n        }  \n        throw new Error(\'Failed to lock resource\');  \n      } catch (error) {  \n        // 如果一个资源锁定失败，则抛出错误，以便外部可以处理  \n        throw error;  \n      }  \n    });  \n    \n    // 等待所有资源锁定  \n    const lockedResources = await Promise.all(lockPromises);  \n    return lockedResources.map(({ resource, lockValue }) => lockValue);  \n  }  \n  \n  async using(resources: string[], ttl: number, callback: (signal: { aborted: boolean, error?: Error }) => Promise<void>): Promise<void> {  \n    let lockedResources: string[] | null = null;  \n    try {  \n      // 尝试锁定所有资源  \n      lockedResources = await this.tryLock(redlock, resources, ttl);  \n      if (!lockedResources) {  \n        throw new Error(\'Failed to lock all resources\');  \n      }  \n    \n      // 创建一个超时Promise  \n      const timeoutPromise = new Promise((_, reject) => {  \n        const timer = setTimeout(() => {  \n          clearTimeout(timer);  \n          reject(new Error(\'Operation timed out\'));  \n        }, ttl);  \n      });  \n    \n      // 使用Promise.race来监听回调执行或超时  \n      await Promise.race([  \n        callback({ aborted: false }),  \n        timeoutPromise  \n      ]);  \n    \n      // 如果不是由于超时完成的，则忽略callback的结果  \n    } catch (error) {  \n      // 如果在try块中抛出错误或超时，则进入这里  \n      if (lockedResources) {  \n        // 解锁已锁定的资源  \n        for (let i = 0; i < resources.length; i++) {  \n          if (lockedResources[i]) {  \n            await this.unlock(resources[i], lockedResources[i]);  \n          }  \n        }  \n      }  \n      // 重新抛出错误  \n      throw error;  \n    } finally {  \n      // 确保在finally块中不会再次抛出错误  \n      // 因为错误已经在catch块中处理过了  \n    }  \n  }\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"使用示例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例",children:"#"}),"使用示例"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"(async () => {  \n  const redlock = new Redlock();  \n  const resources = ['resource1', 'resource2'];  \n  const ttl = 1000; // 锁定超时时间  \n\n  // 锁定资源\n  await redlock.using(resources, ttl, async (signal) => {  \n    // 处理业务\n    await processData(signal);  \n  });\n  \n})();\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"}),"总结"]}),"\n",(0,s.jsx)(n.p,{children:"分布式锁在分布式系统中扮演着重要的角色，它能够确保数据一致性、避免并发冲突并提高系统可伸缩性。而Redlock算法作为一种基于Redis的分布式锁实现方式，具有高可用性、容错性和可扩展性等优势，因此在实际应用中得到了广泛的应用。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(t,e)})):t(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["guide%2Fdocs%2Flock.mdx"]={toc:[{id:"为什么要使用分布式锁",text:"为什么要使用分布式锁",depth:2},{id:"分布式锁的作用",text:"分布式锁的作用",depth:2},{id:"分布式锁的实现方式",text:"分布式锁的实现方式",depth:2},{id:"redlock算法",text:"Redlock算法",depth:2},{id:"redlock算法的优势",text:"Redlock算法的优势",depth:2},{id:"实现算法",text:"实现算法",depth:2},{id:"使用示例",text:"使用示例",depth:2},{id:"总结",text:"总结",depth:2}],title:"分布式锁",frontmatter:{}}}}]);