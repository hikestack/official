"use strict";(self.webpackChunk_hikestack_official=self.webpackChunk_hikestack_official||[]).push([["5759"],{6288:function(e,n,t){t.r(n),t.d(n,{default:function(){return i}});var s=t(1549),r=t(6603);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",pre:"pre",code:"code"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"ai-工程化",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ai-工程化",children:"#"}),"AI 工程化"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"挑战"})}),"\n",(0,s.jsx)(n.p,{children:"大型语言模型（LLM）的崛起无疑为自然语言处理（NLP）领域带来了巨大的变革。这些模型凭借海量的数据和复杂的神经网络结构，展现出了强大的语言理解和生成能力。然而，尽管大模型在文本生成、问答等任务中表现出色，但其返回的自然语言形式却难以被应用程序直接使用，这成为了 AI 工程化过程中的一大挑战。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"模式工程"})}),"\n",(0,s.jsx)(n.p,{children:"C#、TypeScript 之父 Anders Hejlsberg 开源的 TypeChat 项目，通过使用模式工程代替传统的提示工程给出了一个解决方案。TypeChat 的核心原理在于其模式工程的方法。它允许开发者自由定义类型，以准确表达自然语言应用程序所支持的意图。一旦定义了这些类型，TypeChat 会为 LLM 制定提示，并验证 LLM 的响应是否符合模式。当验证失败时，TypeChat 会进行额外的语言模型交互，以修复不符合要求的输出。这种机制确保了 TypeChat 能够生成符合应用程序需求的响应结果，从而实现了 AI 与应用程序的协同工作。"}),"\n",(0,s.jsx)(n.p,{children:"通俗的来讲就是在每次向大模型提问的时候要求它按照指定的类型返回 JSON 数据，如果返回的数据不符合你给出的类型定义，把错误信息告诉它让他修复之后重新返回，最后将验证通过后的 JSON 数据回给应用程序。"}),"\n",(0,s.jsx)(n.p,{children:"这是一个使用 TypeChat 编写的情感分类器，它将用户输入分类为消极、中性或积极:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",meta:"",children:"// sentimentSchema.ts\nexport interface SentimentResponse {\n  sentiment: '消极的' | '中性的' | '积极的';\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",meta:"",children:"import assert from 'assert';\nimport dotenv from 'dotenv';\nimport findConfig from 'find-config';\nimport fs from 'fs';\nimport path from 'path';\nimport { createJsonTranslator, createLanguageModel } from 'typechat';\nimport { processRequests } from 'typechat/interactive';\nimport { createTypeScriptJsonValidator } from 'typechat/ts';\nimport { SentimentResponse } from './sentimentSchema';\n\nconst dotEnvPath = findConfig('.env');\nassert(dotEnvPath, '.env file not found!');\ndotenv.config({ path: dotEnvPath });\n\nconst model = createLanguageModel(process.env);\n// 将模式定义的源文件内容用于构建提示词\nconst schema = fs.readFileSync(path.join(__dirname, 'sentimentSchema.ts'), 'utf8');\nconst validator = createTypeScriptJsonValidator<SentimentResponse>(schema, 'SentimentResponse');\nconst translator = createJsonTranslator(model, validator);\n\nprocessRequests('\uD83D\uDE00> ', process.argv[2], async request => {\n  const response = await translator.translate(request);\n  if (!response.success) {\n    console.log(response.message);\n    return;\n  }\n  console.log(`用户的情绪是 ${response.data.sentiment}`);\n});\n\n// 输入 TypeChat 真棒!\n\n// 输出 用户情绪是 积极的\n"})}),"\n",(0,s.jsx)(n.p,{children:"核心代码逻辑如下:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",meta:"",children:"async function translate(request: string, promptPreamble?: string | PromptSection[]) {\n  const preamble: PromptSection[] =\n    typeof promptPreamble === 'string' ? [{ role: 'user', content: promptPreamble }] : promptPreamble ?? [];\n\n  let prompt: PromptSection[] = [...preamble, { role: 'user', content: typeChat.createRequestPrompt(request) }];\n\n  let attemptRepair = typeChat.attemptRepair;\n\n  // 进入一个无限循环，直到得到有效的响应或修复失败\n  while (true) {\n    // 使用模型完成prompt，并等待其响应\n    const response = await model.complete(prompt);\n\n    // 如果响应不成功，直接返回响应\n    if (!response.success) {\n      return response;\n    }\n\n    // 获取响应的文本内容\n    const responseText = response.data;\n\n    // 查找响应文本中JSON的开始和结束索引\n    const startIndex = responseText.indexOf('{');\n    const endIndex = responseText.lastIndexOf('}');\n\n    // 如果响应文本不是有效的JSON格式，返回错误\n    if (!(startIndex >= 0 && endIndex > startIndex)) {\n      return error(`Response is not JSON:\\n${responseText}`);\n    }\n\n    // 提取JSON文本\n    const jsonText = responseText.slice(startIndex, endIndex + 1);\n\n    // 尝试将JSON文本解析为对象\n    let jsonObject;\n    try {\n      jsonObject = JSON.parse(jsonText) as object;\n    } catch (e) {\n      // 如果解析失败，返回错误\n      return error(e instanceof SyntaxError ? e.message : 'JSON parse error');\n    }\n\n    // 如果TypeChat设置了stripNulls，则去除jsonObject中的null值\n    if (typeChat.stripNulls) {\n      stripNulls(jsonObject);\n    }\n\n    // 使用validator对jsonObject进行模式验证\n    const schemaValidation = validator.validate(jsonObject);\n\n    // 如果模式验证成功，则进一步使用TypeChat进行实例验证\n    const validation = schemaValidation.success ? typeChat.validateInstance(schemaValidation.data) : schemaValidation;\n\n    // 如果验证成功，返回验证结果\n    if (validation.success) {\n      return validation;\n    }\n\n    // 如果不允许修复或修复失败，返回错误\n    if (!attemptRepair) {\n      return error(`JSON validation failed: ${validation.message}\\n${jsonText}`);\n    }\n\n    // 如果允许修复，将响应文本和修复提示添加到prompt中\n    prompt.push({ role: 'assistant', content: responseText });\n    prompt.push({ role: 'user', content: typeChat.createRepairPrompt(validation.message) });\n\n    // 禁用下一次的修复尝试\n    attemptRepair = false;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"总结"})}),"\n",(0,s.jsx)(n.p,{children:"TypeChat 充当了自然语言、应用模式和 API 之间的桥梁，简化了开发过程并解决了应用程序与大型语言模型（LLM）的集成问题。它使用了一种创新的模式工程方法，取代了传统的提示工程方法。开发者可以自由定义类型，准确表达自然语言应用程序所支持的意图。"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(a,e)})):a(e)}let i=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["guide%2Fbackend%2Fdocs%2Ftype-chat.mdx"]={toc:[],title:"AI 工程化",frontmatter:{}}}}]);