[{"id":0,"title":"","content":"","routePath":"/official/api/OpenAPI/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"","content":"","routePath":"/official/api/","lang":"","toc":[],"domain":"","frontmatter":{"pageType":"custom"},"version":""},{"id":2,"title":"元编程","content":"#","routePath":"/official/guide/backend/metadata","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"动态模块","content":"#\n\n使用模块是构建高效、可维护和可扩展的应用程序的关键所在。模块使得开发者能够清晰地分离关注点，将应用程序的不同部分封装到独立的模块中。\n\n以日志模块为例，展示如何创建一个标准的 Nest 动态模块，以下是详细的步骤指南：\n\n\n目录结构#\n\n首先，你需要为日志模块创建一个基本的文件结构。这通常包括一个模块文件（如 logger.module.ts）、一个服务文件（如\nlogger.service.ts），以及可能需要的接口（interfaces）和适配器（adapters）。\n\n\n\n\n定义接口#\n\n定义服务需要实现的 ILogger 接口，这里直接继承自 Nest 内部提供的 LoggerService 接口。\n\n\n\n在 logger.service.ts 文件中，通过模块配置将具体的实现类传递给服务。\n\n\n\n\n实现服务#\n\nWinstonAdapter 使用 实现实际的日志记录功能，比如将日志信息输出到控制台、文件或其他日志存储系统。\n\n\n\n\n构建模块#\n\nnest 提供了一个 ConfigurableModuleBuilder 类用于便捷的构建动态模块的配置。\n\n\n\n使用 @Module 装饰器来定义日志模块。这个模块将包含日志服务作为提供者，并可以配置为动态模块，以便在应用程序的不同部分中按需加载。\n\n\n\n\n注册模块#\n\n由于它是一个动态模块，你可以使用 LoggerModule.register() 或 LoggerModule.registerAsync()\n方法在根模块或其他模块中导入它。\n\n\n\n\n使用服务#\n\n最后，你可以在需要记录日志的地方注入 LoggerService 并使用它的方法。这可以通过构造函数注入或其他依赖注入机制来实现。\n在这个日志模块中，我们通过适配器模式实现了对Winston日志库的封装，使得日志服务能够灵活地切换到不同的日志框架，而无需修改服务调用方的代码。\n\n","routePath":"/official/guide/backend/module","lang":"","toc":[{"text":"目录结构","id":"目录结构","depth":2,"charIndex":114},{"text":"定义接口","id":"定义接口","depth":2,"charIndex":245},{"text":"实现服务","id":"实现服务","depth":2,"charIndex":361},{"text":"构建模块","id":"构建模块","depth":2,"charIndex":429},{"text":"注册模块","id":"注册模块","depth":2,"charIndex":566},{"text":"使用服务","id":"使用服务","depth":2,"charIndex":666}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"介绍","content":"#\n\nHikeStack\n是一组专为构建高性能、可扩展TypeScript应用而精心打造的工具集。致力于运用最前沿的语言特性和开发工具，帮助开发者构建强大而稳健的TypeScript应用\n。","routePath":"/official/guide/introduction","lang":"","toc":[],"domain":"","frontmatter":{},"version":""}]